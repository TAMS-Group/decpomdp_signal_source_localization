// GraphSensingProblem.cpp
// Copyright 2019 Mikko Lauri
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include "GraphSensingProblem.h"
#include <boost/random/normal_distribution.hpp>
#include <boost/random/uniform_01.hpp>
#include "EigenUtils.hpp"
#include "common.hpp"

namespace pgi {
namespace GraphSensing {

double distance(const location_t& a, const location_t& b)
{
  return std::hypot(a.x - b.x, a.y - b.y);
}

void state_t::reinvigorate(PRNG& rng) {
  // add tiny noise to the source location to reinvigorate particle
  static const double mean = 0.0;
  static const double noise_stdev = 0.25;
  boost::random::normal_distribution<> nd(mean, noise_stdev);
  source_location_.x += rng(nd);
  source_location_.y += rng(nd);
}

void sample_initial_states(std::vector<state_t>& states, int num, PRNG& rng) {
  states.resize(num);
  for (int i = 0; i < num; ++i)
    states[i] = sample_initial_state(rng);
}

state_t sample_initial_state(PRNG& rng)
{
  state_t s;
  s.agent_0_location_ = 0;
  s.agent_1_location_ = 0;
  boost::random::uniform_01<double> ud;
  s.source_location_.x = -20.0 + 40.0 * rng(ud);
  s.source_location_.y = -20.0 + 40.0 * rng(ud);
  return s;
}

void sample_initial_states_gaussian(std::vector<state_t>& states, int num,
                                    const location_t& source_mean_location,
                                    double stdev_x, double stdev_y, PRNG& rng) {
  states.resize(num);
  boost::random::normal_distribution<> xdist(source_mean_location.x, stdev_x);
  boost::random::normal_distribution<> ydist(source_mean_location.y, stdev_y);
  for (auto& s : states) {
    s.agent_0_location_ = 0;
    s.agent_1_location_ = 0;
    s.source_location_.x = rng(xdist);
    s.source_location_.y = rng(ydist);
  }
}

bool MovementModel::action_allowed_in(int loc, int act) const {
  const auto& allowed = allowed_next_locations_.at(loc);
  return (std::find(allowed.begin(), allowed.end(), act) != allowed.end());
}

int MovementModel::next_location(int old_loc, int act) const {
  return act;
}

double StateTransitionModel::get(const state_t& next_state,
                                 const state_t& old_state,
                                 std::size_t j_act) const {
  if ((next_state.source_location_.x != old_state.source_location_.x) ||
      (next_state.source_location_.y != old_state.source_location_.y))
    return 0.0;

  auto agent0_act = joint_action_space.local_index(j_act, 0);
  if (!moves_.action_allowed_in(old_state.agent_0_location_, agent0_act))
    return 0.0;

  if (next_state.agent_0_location_ !=
      moves_.next_location(old_state.agent_0_location_, agent0_act))
    return 0.0;

  auto agent1_act = joint_action_space.local_index(j_act, 1);
  if (!moves_.action_allowed_in(old_state.agent_1_location_, agent1_act))
    return 0.0;

  if (next_state.agent_1_location_ !=
      moves_.next_location(old_state.agent_1_location_, agent1_act))
    return 0.0;

  return 1.0;
}

state_t StateTransitionModel::sample_next_state(const state_t& state,
                                                std::size_t j_act,
                                                PRNG& rng) const {
  state_t new_state(state);

  auto agent0_act = joint_action_space.local_index(j_act, 0);
  new_state.agent_0_location_ =
      moves_.next_location(state.agent_0_location_, agent0_act);

  auto agent1_act = joint_action_space.local_index(j_act, 1);
  new_state.agent_1_location_ =
      moves_.next_location(state.agent_1_location_, agent1_act);

  return new_state;
}

double RSSObservationModel::get(std::size_t j_obs, const state_t& state,
                                std::size_t j_act) const {
  const location_t& agent0_location =
      index_to_xy_loc_.at(state.agent_0_location_);
  const auto p0 = get_observation_prob(state.source_location_, agent0_location);

  const location_t& agent1_location =
      index_to_xy_loc_.at(state.agent_1_location_);
  const auto p1 = get_observation_prob(state.source_location_, agent1_location);

  auto agent0_obs_idx = rss_joint_observation_space.local_index(j_obs, 0);
  auto agent1_obs_idx = rss_joint_observation_space.local_index(j_obs, 1);
  return p0[agent0_obs_idx] * p1[agent1_obs_idx];
}

std::size_t RSSObservationModel::sample_observation(const state_t& new_state,
                                                    std::size_t j_act,
                                                    PRNG& rng) const {
  const location_t& agent0_location =
      index_to_xy_loc_.at(new_state.agent_0_location_);
  const auto p0 = get_observation_prob(new_state.source_location_, agent0_location);

  const location_t& agent1_location =
      index_to_xy_loc_.at(new_state.agent_1_location_);
  const auto p1 = get_observation_prob(new_state.source_location_, agent1_location);

  const std::vector<double> p_obs = [&]() {
    std::vector<double> p(rss_joint_observation_space.num_joint_indices(),
                          0.0);
    for (std::size_t j_obs = 0;
         j_obs < rss_joint_observation_space.num_joint_indices();
         ++j_obs) {
      auto agent0_obs_idx =
          rss_joint_observation_space.local_index(j_obs, 0);
      auto agent1_obs_idx =
          rss_joint_observation_space.local_index(j_obs, 1);
      p[j_obs] = p0[agent0_obs_idx] * p1[agent1_obs_idx];
    }
    return p;
  }();
  boost::random::discrete_distribution<> dist(p_obs);
  return rng(dist);
}

double RSSObservationModel::rss_noise_free(const location_t& source, const location_t& agent) const
{
  const double d = distance(source, agent);
  const double free_space_loss = is_almost_zero(d) ? 0.0 :  20.0 * std::log10(d);
  return Ptx + Gtx - Ltx + Grx - Lrx + 27.55 - 20.0 * std::log10(v) - free_space_loss;
}

double RSSObservationModel::rice_cdf(double loss)
{
  static std::vector<double> losses{0.0, 1.6534617311957234, 2.3403115876933502, 2.868698280563, 3.315284725257552, 3.7097399482757716, 4.06726772192108, 4.396892771920609, 4.704490796052301, 4.994140105197238, 5.268808006768926, 5.530733057324094, 5.78165325361587, 6.022949862120614, 6.255742131093678, 6.480951948088219, 6.699349335001505, 6.911585294453001, 7.118216056114875, 7.319721323998239, 7.516518244321699, 7.708972259817513, 7.897405658647047, 8.08210438934324, 8.263323553029053, 8.441291873656887, 8.616215369412991, 8.788280393052686, 8.957656168828308, 9.12449692423775, 9.288943692948797, 9.451125848815776, 9.611162418418422, 9.769163209975522, 9.925229789072556, 10.07945632585522, 10.231930333786913, 10.382733316458026, 10.531941336052766, 10.679625514763034, 10.825852478566162, 10.970684751259752, 11.114181105401087, 11.256396875773982, 11.397384240159521, 11.537192471484234, 11.675868164833078, 11.813455442323665, 11.949996138425188, 12.085529967956896, 12.220094678705538, 12.353726190349706, 12.486458721164803, 12.618324903798513, 12.749355891248893, 12.879581454041624, 13.00903006948504, 13.13772900378025, 13.265704387675099, 13.392981286273644, 13.519583763545748, 13.645534942022469, 13.770857058111298, 13.895571513419863, 14.019698922436817, 14.14325915688319, 14.266271387016229, 14.388754120140192, 14.510725236553677, 14.63220202314143, 14.753201204798795, 14.873738973859831, 14.993831017684137, 15.113492544543812, 15.23273830793919, 15.351582629460838, 15.47003942030507, 15.58812220154126, 15.705844123220611, 15.823217982409117, 15.94025624022013, 16.0569710379163, 16.173374212144708, 16.289477309364326, 16.405291640533278, 16.52082813031562, 16.636097574607525, 16.751110489052433, 16.865877160890623, 16.980407659547826, 17.094711846720582, 17.20879938599015, 17.322679751994446, 17.43636223918537, 17.54985597019724, 17.663169903849973, 17.776312842809343, 17.889293440925115, 18.002120210266266, 18.114801527871695, 18.22734564223318, 18.339760679526734, 18.452054649607152, 18.564235452858814, 18.67631088276207, 18.788288633774904, 18.90017630614841, 19.011981410696816, 19.123711373638866, 19.235373541285025, 19.346975184579843, 19.45852350350821, 19.570025631373888, 19.681488638958207, 19.792919538566487, 19.904325287969222, 20.015712794244955, 20.12708891753133, 20.238460474690395, 20.349834242894268, 20.461216963136636, 20.572615343675785, 20.68403606341413, 20.795485775219507, 20.906971109192884, 21.018498675887397, 21.130075069482963, 21.2417068709212, 21.353400651004574, 21.46516297346423, 21.577000398000344, 21.688919483299035, 21.800926790029717, 21.913028883826712, 22.0252323382587, 22.137543737790004, 22.249969680737, 22.362516782223505, 22.475191677138618, 22.588001023100624, 22.700951503430453, 22.814049830138245, 22.92730274692673, 23.04071703221478, 23.154299502184827, 23.26805701385782, 23.381996468199326, 23.496124813260547, 23.610449046003936, 23.724976218308317, 23.83971344000748, 23.95466787974201, 24.06984676960073, 24.18525740855277, 24.30090716594264, 24.416803485052764, 24.53295388673796, 24.64936597313654, 24.7660474314631, 24.88300603788779, 25.000249724007983, 25.117786331208, 25.235623988953108, 25.35377086994687, 25.47223525673314, 25.59102554621168, 25.71015025428139, 25.829618020618234, 25.949437613594807, 26.06961793534947, 26.190168027012632, 26.311097074098505, 26.432414412071353, 26.55412953209484, 26.67625208697443, 26.798791897302976, 26.921758957819677, 27.045163443993978, 27.16901571884606, 27.29332634001624, 27.418106067096375, 27.54336586923717, 27.669116933046013, 27.795370670790525, 27.92213872892446, 28.049432996952902, 28.177265616655447, 28.305648991686322, 28.43459579757223, 28.564118992129934, 28.694231826326245, 28.82494785560543, 28.956280951710145, 29.088245315023613, 29.220855487462657, 29.354126365953384, 29.488073216522928, 29.622711689043175, 29.758057832665052, 29.894128111983708, 30.030939423978992, 30.16850911577743, 30.306855003286174, 30.44599539075214, 30.585949091304094, 30.726735448539173, 30.86837435922, 31.010886297153387, 31.15429237486047, 31.298614177667968, 31.443874204618734, 31.590095439997235, 31.737301655356525, 31.885517374073697, 32.03476784254897, 32.1850792834556, 32.33647859196144, 32.4889936736809, 32.64265335365505, 32.79748744748976, 32.95352681029169, 33.11080338863471, 33.26935027578676, 33.42920177044882, 33.59039343927953, 33.75296218350528, 33.916946309942915, 34.08238560679355, 34.24932142460073, 34.41779676280417, 34.58785636236313, 34.75954680497149, 34.93291661943935, 35.108016395875644, 35.28489890837333, 35.463619246972954, 35.644234959765285, 35.82680620608769, 36.01139592187681, 36.19806999836029, 36.386897475407544, 36.577950751015116, 36.7713058085786, 36.96704244995431, 37.16524462439733, 37.36600062281815, 37.56940346845066, 37.77555124676916, 37.98454748775789, 38.1965015851586, 38.41152925709542, 38.62975305310164, 38.851303010429504, 39.07631688404193, 39.30494141201257, 39.537332688142996, 39.77365710332486, 40.01409228748091, 40.25882816244962, 40.50806812195042, 40.76203035758226, 41.02094935320026, 41.285077574123825, 41.554687382622674, 41.83007321723415, 42.11155408096725, 42.39947639271895, 42.694217267750254, 42.99618830747929, 43.30583999698814, 43.62366683163374, 43.950213323519435, 44.2860811012327, 44.63193716631535, 44.98852415905227, 45.35667195359413, 45.73731253865307, 46.13149734251985, 46.54041901024284, 46.965438180418566, 47.40811701695894, 47.87026161215702, 48.35397624990335, 48.86173383306158, 49.396468214085814, 49.96169839799854, 50.5616970932211, 51.201725653542034, 51.888369019646916, 52.63002695373289, 53.43765871198517, 54.32595730154123, 55.315291965178446, 56.435118406557976, 57.73043961622368, 59.275349859138345, 61.20578330074517, 63.81815725006807, 68.0145853079938, 86.66396588961581};
  static std::vector<double> cdf{0.0, 0.0033441471577470958, 0.006688294323220687, 0.010032441466088195, 0.01337658862876255, 0.016720735785953154, 0.020064882943143788, 0.023409030100334367, 0.0267531772575249, 0.03009732441471532, 0.03344147157190554, 0.03678561872909541, 0.04012976588628475, 0.04347391304347328, 0.0468180602006607, 0.05016220735784643, 0.053506354515029844, 0.05685050167221013, 0.060194648829386306, 0.06353879598655712, 0.06688294314372105, 0.07022709030087622, 0.07357123745802062, 0.07691538461515146, 0.08025953177226584, 0.08360367892936046, 0.08694782608643101, 0.09029197324347332, 0.09363612040048204, 0.0969802675574514, 0.10032441471437502, 0.10366856187124568, 0.10701270902805543, 0.11035685618479528, 0.11370100334145575, 0.11704515049802636, 0.1203892976544956, 0.12373344481085075, 0.12707759196707896, 0.13042173912316546, 0.13376588627909466, 0.1371100334348502, 0.14045418059041465, 0.14379832774576917, 0.1471424749008941, 0.15048662205576865, 0.15383076921037064, 0.15717491636467756, 0.1605190635186654, 0.16386321067230894, 0.1672073578255825, 0.17055150497845897, 0.1738956521309105, 0.17723979928290898, 0.18058394643442435, 0.18392809358542708, 0.18727224073588625, 0.19061638788577018, 0.19396053503504757, 0.1973046821836862, 0.20064882933165357, 0.203992976478917, 0.2073371236254442, 0.2106812707712025, 0.21402541791615914, 0.21736956506028293, 0.22071371220354177, 0.224057859345905, 0.2274020064873425, 0.23074615362782547, 0.23409030076732545, 0.23743444790581572, 0.24077859504327123, 0.24412274217966798, 0.24746688931498417, 0.25081103644919994, 0.254155183582297, 0.2574993307142606, 0.260843477845077, 0.26418762497473613, 0.26753177210323026, 0.2708759192305552, 0.2742200663567096, 0.2775642134816949, 0.280908361791218, 0.2842525089250551, 0.2875966560576725, 0.2909408031890876, 0.2942849503193204, 0.2976290974483959, 0.30097324457634306, 0.30431739170319516, 0.3076615388289904, 0.31100568595377126, 0.31434983307758463, 0.3176939802004828, 0.3210381273225213, 0.3243822744437618, 0.32772642156427007, 0.3310705686841167, 0.3344147158033765, 0.3377588629221289, 0.3411030100404588, 0.3444471571906354, 0.34779130434782596, 0.3511354515050166, 0.3544795986622076, 0.3578237458193982, 0.36116789297658863, 0.3645120401337793, 0.36785618729097, 0.37120033444816075, 0.37454448160535125, 0.37788862876254176, 0.38123277591973237, 0.3845769230769232, 0.38792107023411393, 0.3912652173913045, 0.394609364548495, 0.39795351170568566, 0.40129765886287627, 0.404641806020067, 0.40798595317725755, 0.4113301003344482, 0.41467424749163884, 0.4180183946488296, 0.42136254180602, 0.4247066889632106, 0.42805083612040135, 0.431394983277592, 0.4347391304347827, 0.4380832775919732, 0.44142742474916374, 0.4447715719063548, 0.4481157190635452, 0.45145986622073603, 0.4548040133779265, 0.4581481605351172, 0.4614923076923078, 0.4648364548494983, 0.4681806020066891, 0.47152474916387965, 0.4748688963210701, 0.4782130434782607, 0.48155719063545144, 0.4849013377926423, 0.48824548494983266, 0.49158963210702367, 0.4949337792246445, 0.4982779263050981, 0.5016220733856998, 0.5049662204666395, 0.5083103675481038, 0.5116545146302769, 0.514998661713337, 0.5183428087974579, 0.5216869558828074, 0.5250311029695457, 0.5283752500578256, 0.5317193971477907, 0.5350635460200809, 0.5384076931176677, 0.5417518402171931, 0.5450959873187594, 0.5484401344224572, 0.5517842815283648, 0.555128428636549, 0.5584725757470635, 0.5618167228599489, 0.5651608699752326, 0.5685050170929309, 0.5718491642130447, 0.5751933113355643, 0.5785374584604671, 0.5818816055877174, 0.58522575271727, 0.5885698998490682, 0.5919140469830441, 0.5952581941191213, 0.5986023412572157, 0.6019464883972345, 0.6052906355390782, 0.6086347826826423, 0.6119789298278179, 0.6153230769744933, 0.6186672241225531, 0.6220113712718834, 0.6253555184223694, 0.6286996655738967, 0.6320438127263556, 0.6353879598796387, 0.6387321070336432, 0.6420762541882719, 0.6454204013434345, 0.6487645484990469, 0.6521086956550328, 0.6554528428113231, 0.6587969899678568, 0.6621411371245814, 0.6654852842814518, 0.6688294314384307, 0.6721735785954867, 0.6755177257525963, 0.6788618729097411, 0.6822060200669079, 0.6855501672240871, 0.688894314381273, 0.6922384615384622, 0.695582609544898, 0.6989267556283567, 0.7022709029888196, 0.7056150501672002, 0.7089591973323537, 0.7123033446931725, 0.7156474910801421, 0.7189916387959853, 0.7223357859531706, 0.725679933110344, 0.7290240802674884, 0.7323682274245747, 0.7357123745815538, 0.7390565217383525, 0.7424006688948673, 0.7457448160509592, 0.7490889632064489, 0.7524331103611157, 0.7557772575146974, 0.759121404666891, 0.7624655518173602, 0.7658096989657435, 0.7691538461116645, 0.7724979932547487, 0.7758421403946408, 0.7791862875310255, 0.7825304346636494, 0.7858745817923439, 0.7892187289170511, 0.7925628760378443, 0.7959070231549474, 0.7992511702687546, 0.8025953173798377, 0.8059394644889561, 0.8092836115970475, 0.8126277584700474, 0.8159719056646516, 0.8193160528491218, 0.8226602000226799, 0.826004347184881, 0.8293484943356557, 0.8326926414753356, 0.8360367886046581, 0.839380935724757, 0.8427250842919978, 0.8460692313840635, 0.8494133784718909, 0.8527575255576593, 0.8561016726435874, 0.8594458197318178, 0.8627899668243011, 0.8661341139226828, 0.8694782610282148, 0.8728224081416797, 0.8761665552633591, 0.8795107023930375, 0.8828548495300509, 0.88619899667338, 0.8895431438217799, 0.8928872909739293, 0.8962314381285843, 0.8995755852847094, 0.9029197324415541, 0.9062638795986703, 0.9096080269997785, 0.9129521739114695, 0.9162963213253418, 0.919640468227416, 0.9229846153844434, 0.9263287625405646, 0.9296729096937657, 0.9330170568405448, 0.9363612039767717, 0.93970535109985, 0.9430494982115963, 0.9463936457427637, 0.9497377928969497, 0.9530819400130373, 0.9564260871037494, 0.9597702341921581, 0.9631143812997411, 0.96645852843384, 0.969802675585611, 0.9731468227424752, 0.9764909699235615, 0.9798351170565658, 0.9831792643719218, 0.9865234113712025, 0.98986755852843, 0.9932117056856227, 0.9965558528126099, 0.9999000000000811};

  if (loss <= 0.0)
    return 0.0;
  if (loss >= losses.back())
    return 1.0;

  // linear interpolation
  auto l_above = std::upper_bound(losses.begin(), losses.end(), loss);
  auto l_below = std::prev(l_above);

  auto c_below = std::next(cdf.begin(), std::distance(losses.begin(), l_below));
  auto c_above = std::next(c_below);

  const double fraction = (loss - *l_below) / (*l_above - *l_below);
  return (*c_below * (1.0 - fraction)) + (*c_above * fraction);
}

std::array<double, 3> RSSObservationModel::get_observation_prob(
    const location_t& source, const location_t& agent) const {
  const double rss = rss_noise_free(source, agent);

  std::array<double, 3> probabilities;
  probabilities[0] = rice_cdf(rss - high_threshold); // high
  probabilities[2] = 1.0 - rice_cdf(rss - low_threshold); // low
  probabilities[1] = (1.0 - probabilities[2]) - probabilities[0]; // mid

  return probabilities;
}

double RewardModel::get(const std::vector<state_t>& states,
                        const std::vector<double>& weights,
                        std::size_t j_act) const {
  const auto agent0_act = joint_action_space.local_index(j_act, 0);
  const auto agent1_act = joint_action_space.local_index(j_act, 1);

  double reward(0.0);
  for (std::size_t i = 0; i < states.size(); ++i) {
    const state_t& s = states[i];
    if (!moves_.action_allowed_in(s.agent_0_location_, agent0_act))
      reward += weights[i] * (-INVALID_MOVE_PENALTY);
    if (!moves_.action_allowed_in(s.agent_1_location_, agent1_act))
      reward += weights[i] * (-INVALID_MOVE_PENALTY);
  }
  return reward;
}

double RewardModel::final_reward(const std::vector<state_t>& states,
                                 const std::vector<double>& weights) const {
  Eigen::Matrix<double, 2, Eigen::Dynamic> xy(2, states.size());
  for (std::size_t i = 0; i < states.size(); ++i) {
    xy(0, i) = states[i].source_location_.x;
    xy(1, i) = states[i].source_location_.y;
  }

  Eigen::Map<const Eigen::VectorXd> w(weights.data(), weights.size());
  Eigen::MatrixXd weighted_cov;
  pgi::detail::weighted_cov(xy, w, weighted_cov);
  double det = weighted_cov.determinant();

  if ((det <= 0.0) || (std::isnan(det)))
  {
    return 50.0;
  }

  if (std::isnan(det)) // probably because we had only one non-zero weight
    return 50.0;

  return -std::log(det);
}
}  // namespace GraphSensing

}  // namespace pgi
